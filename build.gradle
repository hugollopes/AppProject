/*
* This file was generated by the Gradle 'init' task.
*
* This is a general purpose Gradle build.
* Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
*/



task buildprodweb( group: "Custom", description: "buildnpmdata"){
    dependsOn 'aioverlord-frontend:buildprodweb'
}

task buildnginx( group: "Custom", description: "buildnginx"){
    dependsOn 'nginx:buildnginx'
}


task createprodnamespaceandflasksvc (type: Exec,group: "Custom", description: "build and deploy prod"){
      //dependsOn 'buildprod'
      dependsOn 'createprodnamespace'
      commandLine "kubectl", "apply","-f","kubernetes/kubernetesprod/flask-service.yaml","--request-timeout=5m"
}

task populateflaskIP (type: Exec,group: "Custom", description: "build and deploy prod"){
      dependsOn 'createprodnamespaceandflasksvc'
      commandLine "python3", "./scripts/populateprodIP.py"


}


task buildprod (group: "Custom", description: "build prod") {
      tasks.findByName('buildprodweb').mustRunAfter 'populateflaskIP'
      tasks.findByName('buildnginx').mustRunAfter 'buildprodweb'
      dependsOn 'populateflaskIP'
      dependsOn 'buildprodweb'
      dependsOn 'nginx:buildnginx'
      dependsOn 'aliveprobe:build'
      dependsOn 'aioverlord-backend:build'
      dependsOn 'database:build'

}

task builddev (group: "Custom") {
      dependsOn 'aioverlord-frontend:build'
      dependsOn 'aioverlord-backend:build'
      dependsOn 'aliveprobe:build'
      dependsOn 'database:build'
}

task builde2e (group: "Custom") {
      dependsOn 'aioverlord-frontend:build'
      dependsOn 'aioverlord-backend:build'
      dependsOn 'aliveprobe:build'
      dependsOn 'e2etests:build'
      dependsOn 'database:build'
}

task createprodnamespace (type: Exec,group: "Custom", description: "build and deploy prod"){
      //dependsOn 'buildprod'
      commandLine "kubectl", "apply","-f","kubernetes/kubernetesprod/namespace.json"


}

task runprod (type: Exec,group: "Custom", description: "build and deploy prod"){
      dependsOn 'builddeployprod'
      commandLine "python3", "runprod.py"
}

task builddeployprod (type: Exec,group: "Custom", description: "build and deploy prod"){
      dependsOn 'buildprod'
      dependsOn 'createprodnamespace'
      commandLine "kubectl", "apply","-f","kubernetes/kubernetesprod","--request-timeout=5m"


}

task cleandev(type: Exec, group: "Custom", description: "cleans up all pods"){
  commandLine "kubectl", "delete","-f","./kubernetes/kubernetesdev", "--ignore-not-found"
}
task cleanprod(type: Exec, group: "Custom", description: "cleans up all pods"){
  commandLine "kubectl", "delete","-f","./kubernetes/kubernetesprod", "--ignore-not-found"
}


task cleane2e(type: Exec, group: "Custom", description: "cleans up e2e"){
  commandLine "kubectl", "delete","namespaces","e2e-topology-feature", "--ignore-not-found"
  doLast {
   exec {
    commandLine "kubectl", "delete","namespaces","e2e-world-feature", "--ignore-not-found"
   }
   exec {
      commandLine "kubectl", "delete","namespaces","e2e-labeldata-feature", "--ignore-not-found"
   }
   exec {
  commandLine "kubectl", "delete","namespaces","e2e-debugfunctions-feature", "--ignore-not-found"
   }
   exec {
  commandLine "kubectl", "delete","namespaces","e2e-mainpage-feature", "--ignore-not-found"
   }
   exec {
  commandLine "kubectl", "delete","namespaces","e2e-user-feature", "--ignore-not-found"
   }
  }
  }



task clean(group: "Custom", description: "cleans up all pods"){
  def env = ""
  if ( project.hasProperty("env"))
    {env = "$env"}

  switch ( env) {
    case "prod":
        dependsOn 'cleanprod'
        break
    case "dev":
        dependsOn 'cleandev'
        break
    case "e2e":
        dependsOn 'cleane2e'
        break
    default:
         dependsOn 'cleanprod'
         dependsOn 'cleane2e'
         dependsOn 'cleandev'
       }
  }

task cleandevpartial(type: Exec, group: "Custom", description: "cleans up all pods"){
  commandLine "echo", "deleting"
  doLast {
  exec { commandLine "kubectl", "delete","-f","./kubernetes/kubernetesdev/applyfolder/flask-deployment.yaml", "--ignore-not-found" }
  exec { commandLine "kubectl", "delete","-f","./kubernetes/kubernetesdev/applyfolder/web-deployment.yaml", "--ignore-not-found" }
  exec { commandLine "kubectl", "delete","-f","./kubernetes/kubernetesdev/applyfolder/mongodb-deployment.yaml", "--ignore-not-found" }
  }
}



task deploydev(type: Exec, group: "Custom", description: "cleans up all pods"){
  commandLine "echo", "deleting"
  doLast {
     try {
  exec { commandLine "mkdir", "kubernetes/kubernetesdev/applyfolder"}
  } catch(Exception e) {
           logger.error "folder alreay exists. Continuing..."
       }
  copy {
    from './kubernetes/kubernetesdev/orig'
    into './kubernetes/kubernetesdev/applyfolder'
        }
  exec { commandLine "sh", "./scripts/sed.sh"}
  exec { commandLine "kubectl", "apply","-f","./kubernetes/kubernetesdev/applyfolder/namespace.json" }
  exec { commandLine "kubectl", "apply","-f","./kubernetes/kubernetesdev/applyfolder" }
  }
}

  task rundev(type: Exec, group: "Custom", description: "starts dev server"){
    tasks.findByName('deploydev').mustRunAfter 'cleandevpartial'
    dependsOn 'cleandevpartial'
    dependsOn 'deploydev'
    commandLine "python3", "rundev.py"
  }

  task rune2e(type: Exec, group: "Custom", description: "runs e2e tests"){
    commandLine "python3", "rune2e.py"
    //needs a return to include in build
  }



task build() {
  def env = ""
  if ( project.hasProperty("env"))
    {env = "$env"}
  switch ( env ) {
    case "prod":
        dependsOn 'buildprod'
        break
    case "dev":
        dependsOn 'builddev'
        break
    default:
         //dependsOn 'builddev'
         dependsOn 'buildprod'
       }
}
